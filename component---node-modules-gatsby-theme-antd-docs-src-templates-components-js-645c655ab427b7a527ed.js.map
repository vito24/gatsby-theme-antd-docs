{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-antd-docs/src/templates/components.js"],"names":["transformerDemos","demos","edges","map","node","preview","code","content","meta","transformerFrontmatter","frontmatter","filename","fields","slug","path","Template","data","rest","pageContext","markdownRemark","allMarkdownRemark","html","description","tableOfContents","menuList","newFrontmatter","filter","includes","localizedPageData","toc","pageQuery"],"mappings":"0QAMA,IAAMA,EAAmB,SAAAC,GACvB,GAAKA,GAAUA,EAAMC,MAGrB,OAAOD,EAAMC,MAAMC,IAAI,YAAe,IAAZC,EAAW,EAAXA,KACxB,OAAO,OAAP,QACEC,QAASD,EAAKE,MACXF,EAAKG,QAFV,CAGEC,KAAK,OAAD,UACCC,YAAuBL,EAAKM,aAD7B,CAEFC,SAAUP,EAAKQ,OAAOC,KACtBC,KAAMV,EAAKQ,OAAOE,YAMX,SAASC,EAAT,GAAmD,IAA/BC,EAA8B,EAA9BA,KAAsBC,GAAQ,EAAxBC,Y,oIAAwB,4BAE7DC,EAKEH,EALFG,eAF6D,EAO3DH,EAJFf,aAH6D,MAGrD,CACNC,MAAO,IAJoD,EAM7DkB,EACEJ,EADFI,kBAGAV,EAKES,EALFT,YACAE,EAIEO,EAJFP,OACAS,EAGEF,EAHFE,KACAC,EAEEH,EAFFG,YACAC,EACEJ,EADFI,gBAGIC,EADYJ,EAAVlB,MAELC,IAAI,YAAe,IAAZC,EAAW,EAAXA,KACAqB,EAAiBhB,YAAuBL,EAAKM,aACnD,OAAO,OAAP,QACEG,KAAMT,EAAKQ,OAAOC,KAClBL,KAAK,OAAD,UACCiB,EADD,CAEFZ,KAAMT,EAAKQ,OAAOC,KAClBF,SAAUP,EAAKQ,OAAOC,OAExBF,SAAUP,EAAKQ,OAAOE,MACnBW,KAGNC,OAAO,qBAAGb,KAAiBc,SAAS,YAEvC,OACE,kBAAC,IAAkBV,EACjB,kBAAC,IAAD,iBACMA,EADN,CAEEhB,MAAOD,EAAiBC,GACxB2B,kBAAiB,eACfpB,KAAK,OAAD,UACCC,YAAuBC,GADxB,CAEFC,SAAUC,EAAOC,KACjBC,KAAMF,EAAOE,OAEfe,IAAKN,EACLhB,QAASc,GACNC,GAELE,SAAUA,MAMX,IAAMM,EAAS","file":"component---node-modules-gatsby-theme-antd-docs-src-templates-components-js-645c655ab427b7a527ed.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport WrapperLayout from '../components/layout';\nimport MainContent from '../components/Content/MainContent';\nimport { transformerFrontmatter } from '../components/utils';\n\nconst transformerDemos = demos => {\n  if (!demos || !demos.edges) {\n    return;\n  }\n  return demos.edges.map(({ node }) => {\n    return {\n      preview: node.code,\n      ...node.content,\n      meta: {\n        ...transformerFrontmatter(node.frontmatter),\n        filename: node.fields.slug,\n        path: node.fields.path,\n      },\n    };\n  });\n};\n\nexport default function Template({ data, pageContext, ...rest }) {\n  const {\n    markdownRemark,\n    demos = {\n      edges: [],\n    },\n    allMarkdownRemark,\n  } = data;\n  const {\n    frontmatter,\n    fields,\n    html,\n    description,\n    tableOfContents,\n  } = markdownRemark;\n  const { edges } = allMarkdownRemark;\n  const menuList = edges\n    .map(({ node }) => {\n      const newFrontmatter = transformerFrontmatter(node.frontmatter);\n      return {\n        slug: node.fields.slug,\n        meta: {\n          ...newFrontmatter,\n          slug: node.fields.slug,\n          filename: node.fields.slug,\n        },\n        filename: node.fields.path,\n        ...newFrontmatter,\n      };\n    })\n    .filter(({ slug }) => !slug.includes('/demo/'));\n\n  return (\n    <WrapperLayout {...rest}>\n      <MainContent\n        {...rest}\n        demos={transformerDemos(demos)}\n        localizedPageData={{\n          meta: {\n            ...transformerFrontmatter(frontmatter),\n            filename: fields.slug,\n            path: fields.path,\n          },\n          toc: tableOfContents,\n          content: html,\n          ...description,\n        }}\n        menuList={menuList}\n      />\n    </WrapperLayout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query TemplateComponentsMarkdown($slug: String!, $demo: String) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      description\n      tableOfContents(maxDepth: 3)\n      frontmatter {\n        title {\n          zh_CN\n          en_US\n        }\n        subtitle\n        order\n        type\n      }\n      fields {\n        path\n        slug\n      }\n    }\n    allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"//components//\" }\n        fields: { slug: { regex: \"/^((?!/demo/).)*$/\" } }\n      }\n      sort: { fields: [fields___slug], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title {\n              zh_CN\n              en_US\n            }\n            order\n            subtitle\n            type\n          }\n          fields {\n            slug\n            path\n          }\n        }\n      }\n    }\n    demos: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"//components//\" }\n        fields: { slug: { regex: $demo } }\n      }\n      sort: { fields: [fields___slug], order: DESC }\n    ) {\n      edges {\n        node {\n          content\n          code\n          frontmatter {\n            title {\n              zh_CN\n              en_US\n            }\n            cols\n            order\n            subtitle\n            type\n          }\n          fields {\n            slug\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}